#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import random
import re
import shlex
import shutil
import string
import subprocess
import sys
import tarfile
import tempfile
import toml

project = "libr"

def or_list(x):
    if x is None:
        return []
    elif not isinstance(x, list):
        return [ x ]
    return x

def salt(N=5):
    symbols = string.ascii_letters + string.digits
    return ''.join(random.choice(symbols) for i in range(N))

class PkgConfig:
    exe = "pkg-config"

    @classmethod
    def cflags(cls, *pkg):
        p = subprocess.run([cls.exe, "--cflags"] + list(pkg), check=True, capture_output=True, text=True)
        return shlex.split(p.stdout.splitlines()[0])

    @classmethod
    def libs(cls, *pkg):
        p = subprocess.run([cls.exe, "--libs"] + list(pkg), check=True, capture_output=True, text=True)
        return shlex.split(p.stdout.splitlines()[0])

class Module:
    def __init__(self, name, description, hdr, src, test, libs, test_libs, pkg, test_pkg, meta):
        self.name = name
        self.description = description
        self.hdr = hdr
        self.src = src
        self.test = test
        self.meta = meta

        self.libs = or_list(libs)
        self.test_libs = or_list(test_libs)
        self.pkg = or_list(pkg)
        self.test_pkg = or_list(test_pkg)

        self.depends = []
        self.test_depends = []

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def cflags(self, arch, test=None):
        cflags = []

        for p in self.pkg or (self.test_pkg if test else []):
            if isinstance(p, dict):
                cflags += PkgConfig.cflags(p[arch])
            else:
                cflags += PkgConfig.cflags(p)

        return cflags

    def ldflags(self, arch, test=None):
        ldflags = []

        for l in self.libs + (self.test_libs if test else []):
            ldflags.append(f"-l{l}")

        for p in self.pkg or (self.test_pkg if test else []):
            if isinstance(p, dict):
                ldflags += PkgConfig.libs(p[arch])
            else:
                ldflags += PkgConfig.libs(p)

        return ldflags

class GitInfo:
    GIT = os.environ.get("GIT", "git")

    def __init__(self, root):
        self.root = root

        p = subprocess.run([GitInfo.GIT, "-C", root, "rev-parse", "HEAD"], capture_output=True, text=True, check=True)
        self.ref = p.stdout.splitlines()[0]
        logger.debug(f"git ref: {self.ref}")

        p = subprocess.run([GitInfo.GIT, "-C", root, "status", "--porcelain"], capture_output=True, text=True, check=True)
        self.dirty = len(p.stdout.splitlines()) > 0
        logger.debug(f"git dirty: {self.dirty}")

        p = subprocess.run([GitInfo.GIT, "-C", root, "remote"], capture_output=True, text=True, check=True)
        remote = p.stdout.splitlines()[0]

        p = subprocess.run([GitInfo.GIT, "-C", root, "remote", "get-url", remote], capture_output=True, text=True, check=True)
        upstream = p.stdout.splitlines()[0]
        logger.debug(f"git upstream (remote): {upstream}")

        if upstream.startswith("git@github.com:"):
            self.url = upstream.replace("git@github.com:", "https://github.com/")
        else:
            self.url = upstream
        logger.debug(f"git url: {self.url}")

    def make(target):
        if not shutil.which(GitInfo.GIT):
            logger.debug("git not available")
            return None

        p = subprocess.run([GitInfo.GIT, "-C", target, "rev-parse", "--show-toplevel"], capture_output=True, text=True)
        if p.returncode != 0:
            logger.warn(f"unable to figure out git context: {p.stderr}")
            return None
        root = p.stdout.splitlines()[0]
        logger.debug(f"git root: {root}")

        return GitInfo(root=root)

class Meta:
    def __init__(self, spec, args):
        self.version = spec["version"]

        self.name = spec.get("name")
        if self.name is None:
            self.name = os.path.basename(args.root)

        self.include_guard = spec.get("include_guard", f"{self.name.upper()}_HEADER")
        self.implementation_guard = spec.get("implementation_guard", f"{self.name.upper()}_IMPLEMENTATION")

        self.git = GitInfo.make(args.root)

def load_modules(spec, args):
    meta = Meta(spec, args)

    modules = {}
    for n, m in spec["module"].items():
        hdr = os.path.join(args.modules, f"{n}.h")

        src = os.path.join(args.modules, f"{n}.c")
        if not os.path.exists(src):
            src = None

        test = os.path.join(args.modules, f"{n}.test.c")
        if not os.path.exists(test):
            test = None

        modules[n] = Module(
            name=n,
            description=m.get("description"),
            hdr=hdr, src=src, test=test,
            libs=m.get("libs", []), test_libs=m.get("test-libs", []),
            pkg=m.get("pkg"), test_pkg=m.get("test-pkg"),
            meta=meta
        )

    for n, m in modules.items():
        depends = spec["module"][n].get("depends", [])
        if not isinstance(depends, list):
            depends = [ depends ]
        m.depends = [ modules[d] for d in depends ]

        test_depends = spec["module"][n].get("test-depends", [])
        if not isinstance(test_depends, list):
            test_depends = [ test_depends ]
        m.test_depends = [ modules[d] for d in test_depends ]

    return modules

def select_modules(modules, selection):
    logger.debug(f"selecting modules: {selection}")
    ms = {}
    def go(m):
        if m.name not in ms:
            ms[m.name] = m
            for d in m.depends:
                go(d)

    for s in selection:
        go(modules[s])

    return list(ms.values())

gnu_source_re = re.compile(r'^#define\s+_GNU_SOURCE')
def gnu_source(modules):
    for m in modules:
        if m.src is None:
            continue
        with open(m.src, "r") as h:
            for l in h.readlines():
                if gnu_source_re.match(l):
                    return True
    return False

def assemble_modules(modules, output, prefix=None):
    meta = modules[0].meta

    logger.debug(f"assembling modules: {' '.join(m.name for m in modules)} into {output.name}")

    with tempfile.TemporaryFile(mode="w+") as f:
        when = datetime.datetime.now().astimezone().isoformat(timespec="seconds")
        version = f"{meta.version}"
        if meta.git:
            if meta.git.dirty:
                version += f" ({meta.git.ref} dirty)"
            else:
                version += f" ({meta.git.ref})"

            version += f" ({meta.git.url})"
        f.write(f"// {meta.name} {version} ({when})\n")
        f.write(f"// modules: {' '.join([m.name for m in modules])}\n")
        f.write(f"\n")

        f.write(f"#ifndef {meta.include_guard}\n")
        f.write(f"#define {meta.include_guard}\n")
        f.write(f"\n")

        if prefix is not None:
            f.write(f"#define LIBR(x) {prefix}##x\n")
        else:
            f.write(f"#define LIBR(x) x\n")

        f.write(f"#define PRIVATE __attribute__((visibility(\"hidden\")))\n")
        f.write(f"#define PUBLIC __attribute__((visibility(\"default\")))\n")
        f.write(f"#define API PRIVATE\n")

        f.write(f"\n")

        for m in modules:
            f.write(f"\n// {meta.name}: {os.path.basename(m.hdr)}\n")
            with open(m.hdr, "r") as h:
                for l in h.readlines():
                    if l.startswith("#pragma once"):
                        continue
                    f.write(l)
        f.write(f"#endif // {meta.include_guard}\n\n")

        f.write(f"#ifdef {meta.implementation_guard}\n")
        r_include = re.compile(r'^#include\s+"[^"]+"')
        for m in modules:
            if m.src is None:
                continue
            f.write(f"\n// {meta.name}: {os.path.basename(m.src)}\n")
            with open(m.src, "r") as h:
                for l in h.readlines():
                    if r_include.match(l) or gnu_source_re.match(l):
                        continue
                    f.write(l)
        f.write(f"#endif // {meta.implementation_guard}\n")

        f.seek(0)
        output.write(f.read())

def compilation_test(src, *srcs, cc=None, cflags=None, ldflags=None, cwd=None):
    cc = cc or "gcc"
    cflags = cflags or []
    ldflags = ldflags or []
    src = or_list(src)

    with tempfile.TemporaryDirectory() as tmp:
        out = os.path.join(tmp, "a.out")
        cmdline = [cc] + cflags + ["-o", out]
        cmdline += src + list(srcs)
        cmdline += ldflags
        logger.debug(f"compiling: {cmdline}")
        subprocess.run(cmdline, check=True, cwd=tmp)

        logger.debug(f"running: {out}")

        subprocess.check_call([os.path.basename(out)], executable=out, cwd=None)

def compilation_test_modules(modules, args):
    meta = modules[0].meta
    logger.info(f"compilation testing modules: {' '.join(m.name for m in modules)}")

    with tempfile.TemporaryDirectory() as tmp:
        hdr = "r.h"
        with open(os.path.join(tmp, hdr), "w") as f:
            assemble_modules(modules, f)

        src = os.path.join(tmp, "main.c")
        with open(src, "w") as f:
            if gnu_source(modules):
                logger.debug("gnu source detected")
                f.write(f'#define _GNU_SOURCE\n')
            f.write(f'#define {meta.implementation_guard}\n')
            f.write(f'#include "{hdr}"\n')
            f.write('int main(int argc, char* argv[]) { return 0; }\n')

        cflags = args.cflags
        ldflags = []
        for m in modules:
            cflags += m.cflags(arch=args.arch)
            ldflags += m.ldflags(arch=args.arch)

        compilation_test(src, ldflags=ldflags, cc=args.cc, cflags=cflags)

def separate_compilation_test_modules(modules, args):
    meta = modules[0].meta
    logger.info(f"separate compilation testing modules: {' '.join(m.name for m in modules)}")

    with tempfile.TemporaryDirectory() as tmp:
        hdr = "r.h"
        with open(os.path.join(tmp, hdr), "w") as f:
            assemble_modules(modules, f)

        impl = os.path.join(tmp, "impl.c")
        with open(impl, "w") as f:
            if gnu_source(modules):
                f.write(f'#define _GNU_SOURCE\n')
            f.write(f'#define {meta.implementation_guard}\n')
            f.write(f'#include "{hdr}"\n')

        main = os.path.join(tmp, "main.c")
        with open(main, "w") as f:
            f.write(f'#include "{hdr}"\n')
            f.write('int main(int argc, char* argv[]) { return 0; }\n')

        cflags = args.cflags
        ldflags = []
        for m in modules:
            cflags += m.cflags(arch=args.arch)
            ldflags += m.ldflags(arch=args.arch)

        compilation_test(impl, main, ldflags=ldflags, cc=args.cc, cflags=cflags)

def check_visibility(module, modules, args):
    logger.info(f"checking visible symbols: {module}")
    with tempfile.TemporaryDirectory() as tmp:
        hdr = "r.h"
        with open(os.path.join(tmp, hdr), "w") as f:
            assemble_modules(modules, f)

        src = os.path.join(tmp, "r.c")
        lib = os.path.join(tmp, "libr.so")
        with open(src, "w") as f:
            if gnu_source(modules):
                f.write(f'#define _GNU_SOURCE\n')
            f.write(f'#define {module.meta.implementation_guard}\n')
            f.write(f'#include "{hdr}"\n')

        cmdline = [args.cc] + args.cflags
        cmdline += ["-rdynamic", "-fPIC", "-shared", "-nostdlib"]
        cmdline += ["-o", lib, src ]

        logger.debug(f"compiling: {cmdline}")
        subprocess.check_call(cmdline)

        cmdline = [args.nm, "--dynamic", "--defined-only", lib]
        logger.debug(f"running: {cmdline}")
        symbols = subprocess.check_output(cmdline).splitlines()
        if symbols:
            raise RuntimeError("visible symbols", symbols)

def test_module(module, modules, args, workdir):
    logger.info(f"testing module: {module}")
    if module.test is None:
        logger.warn("no tests available")
        return

    meta = module.meta
    modules = select_modules(modules, [module.name, "test"] + [td.name for td in module.test_depends])
    logger.debug(f"running with test dependencies: {modules}")

    hdr = f"{module}.r.h"
    with open(os.path.join(workdir, hdr), "w") as f:
        assemble_modules(modules, f, prefix=f"r_{salt()}_")

    test_src = os.path.join(workdir, f"{module}.test.c")
    with open(test_src, "w") as f:
        if gnu_source(modules):
            logger.debug("gnu source detected")
            f.write(f'#define _GNU_SOURCE\n')
        f.write(f'#define {meta.implementation_guard}\n')
        f.write(f'#include "{hdr}"\n\n')
        f.write(f'#include <assert.h>\n\n')

        logger.debug(f"test driver: {module.test}")
        with open(module.test, "r") as g:
            f.write(g.read())

    exe = test_src.removesuffix(".c")
    cflags = args.cflags or []
    ldflags = ["-z", "execstack"]
    for m in modules:
        cflags += m.cflags(arch=args.arch, test=True)
        ldflags += m.ldflags(arch=args.arch, test=True)

    cmdline = [args.cc] + cflags + ["-o", exe, test_src] + ldflags

    logger.debug(f"compiling: {cmdline}")
    subprocess.run(cmdline, check=True, cwd=workdir)

    cmdline = [exe]
    if args.verbose:
        cmdline += ["-oe"]
    logger.debug(f"running compiled binary: {cmdline}")
    subprocess.run(cmdline, check=True, cwd=workdir)

def parse_args():
    parser = argparse.ArgumentParser(
        description="Single file bundler",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("--log", default=os.environ.get("LOG_LEVEL", "INFO"), help="set log level")

    paths = parser.add_argument_group('paths')
    default_root = os.environ.get("ROOT", os.path.dirname(os.path.realpath(__file__)))
    paths.add_argument("--root", default=default_root)
    paths.add_argument("--modules", default=os.environ.get("MODULES"))

    compilation = parser.add_argument_group('compilation')
    compilation.add_argument("-A", "--arch", default=os.getenv("ARCH", "archlinux"))
    compilation.add_argument("-c", "--cc", default=os.getenv("CC", "gcc"))
    compilation.add_argument("--nm", default="nm")
    compilation.add_argument("--pkg-config", default=os.getenv("PKG_CONFIG", "pkg-config"))
    compilation.add_argument("--cflags", default="-Wall -Werror")

    parser.add_argument("-l", "--list", action="store_true")
    parser.add_argument("-L", "--list-names-only", action="store_true")

    parser.add_argument("-t", "--test", metavar="BOOL", type=bool, default=True)
    parser.add_argument("--test-result", metavar="TARBALL")
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("-r", "--keep-test-result", action="store_true")

    parser.add_argument("-T", "--compilation-test", metavar="BOOL", type=bool, default=True)

    parser.add_argument("-o", "--output", default=os.environ.get("OUTPUT"))
    parser.add_argument("selection", metavar="MODULE", nargs="*")

    args = parser.parse_args()

    if args.modules is None:
        args.modules = os.path.join(args.root, "modules")

    args.cflags = shlex.split(args.cflags)

    return args

logger = None
def setup_logger(level):
    l = logging.getLogger("bundle")
    l.setLevel(level)

    ch = logging.StreamHandler()
    ch.setLevel(level)

    f = logging.Formatter(
        fmt="%(asctime)s:%(name)s:%(levelname)s %(message)s",
        datefmt="%Y-%m-%dT%H:%M:%S%z")
    ch.setFormatter(f)

    l.addHandler(ch)

    return l

if __name__ == "__main__":
    args = parse_args()
    logger = setup_logger(args.log.upper())
    logger.debug(f"args: {args}")

    PkgConfig.exe = args.pkg_config

    with open(os.path.join(args.root, f"{project}.toml"), "r") as f:
        spec = toml.load(f)
        logger.debug(f"spec: {spec}")
        modules = load_modules(spec, args)

    if args.list_names_only:
        if args.selection:
            ms = select_modules(modules, args.selection)
        else:
            ms = modules.values()

        for m in ms:
            print(m.name)

        sys.exit(0)

    if args.list or len(args.selection) == 0:
        if args.list:
            f = sys.stdout
            ec = 0
        else:
            f = sys.stderr
            f.write("refusing to bundle empty selection, choose some modules:\n")
            ec = 1

        if args.selection:
            ms = select_modules(modules, args.selection)
        else:
            ms = modules.values()

        for m in ms:
            if m.description:
                f.write(f"{m.name}:  {m.description}\n")
            else:
                f.write(f"{m.name}\n")

        sys.exit(ec)

    selection = select_modules(modules, args.selection)

    tmp = tempfile.TemporaryDirectory(prefix=f"{project}-tests-")
    when = datetime.datetime.now(datetime.UTC).strftime("%Y%m%dT%H%M%SZ")
    fn = f"{project}-tests-{when}"
    workdir = os.path.join(tmp.name, fn)
    os.mkdir(workdir)
    try:
        if args.compilation_test:
            compilation_test_modules(selection, args)
            separate_compilation_test_modules(selection, args)

            for m in selection:
                check_visibility(m, selection, args)

        if args.test:
            for m in selection:
                if m.test:
                    test_module(m, modules, args, workdir=workdir)
    finally:
        if args.test_result or args.keep_test_result:
            tr = args.test_result if args.test_result else f"{fn}.tar.gz"
            logger.info(f"storing test results: {tr}")
            with tarfile.open(tr, mode="x:") as tar:
                tar.add(workdir, arcname=fn)
        tmp.cleanup()

    if args.output:
        output = open(args.output, "w")
    else:
        output = sys.stdout.buffer
    assemble_modules(selection, output=output)
